/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Create;

import com.jidesoft.grid.AutoFilterTableHeader;
import com.jidesoft.swing.CheckBoxList;
import hbaseAddColumnFamily.hbaseAddFamily;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.HBaseAdmin;

/**
 *
 * @author yujia1986
 */
public class pnl_create_hbase_table extends javax.swing.JPanel {

    /**
     * Creates new form pnl
     */
    public pnl_create_hbase_table() {
        initComponents();
        setCmbBox();
        showHBaseTables runabletask = new showHBaseTables();
        new Thread(runabletask).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txt_table_name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txt_field_name = new javax.swing.JTextField();
        cmb_field_type = new javax.swing.JComboBox();
        btn_add = new javax.swing.JButton();
        list_field = new javax.swing.JScrollPane();
        tbl_fields = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_hbase_tables = new com.jidesoft.grid.SortableTable();
        btn_add_field = new javax.swing.JButton();
        btn_create = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();

        jLabel1.setText("Table Name:");

        jLabel2.setText("Field Name:");

        btn_add.setText("Add Field");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        tbl_fields.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Field Name", "Field Type"
            }
        ));
        list_field.setViewportView(tbl_fields);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("HBase Tables Available"));

        tbl_hbase_tables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tbl_hbase_tables);

        btn_add_field.setText("Add Field");
        btn_add_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_fieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_add_field)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_add_field)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))
        );

        btn_create.setText("Create");
        btn_create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_createActionPerformed(evt);
            }
        });

        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(list_field)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_table_name)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_field_name)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmb_field_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_add))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_clear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_create)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_clear, btn_create, btn_delete});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_table_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_field_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_field_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_add))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(list_field, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_create)
                    .addComponent(btn_delete)
                    .addComponent(btn_clear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, txt_table_name});

    }// </editor-fold>//GEN-END:initComponents

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        // TODO add your handling code here:
        String fieldName = txt_field_name.getText();
        String fieldType = cmb_field_type.getSelectedItem().toString();
        DefaultTableModel model = (DefaultTableModel) tbl_fields.getModel();
        String[] tmp = new String[2];
        tmp[0] = fieldName;
        tmp[1] = fieldType;
        model.addRow(tmp);
        txt_field_name.setText(null);
        cmb_field_type.setSelectedIndex(0);
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tbl_fields.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btn_clearActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tbl_fields.getModel();
        model.removeRow(tbl_fields.getSelectedRow());
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_createActionPerformed
        try {
            // TODO add your handling code here:
            writeType();
            createColumnsTxt();
            String tableName = txt_table_name.getText();
            ArrayList<String> list1 = new ArrayList<>();
            ArrayList<String> list2 = new ArrayList<>();
            for (int i = 0; i < tbl_fields.getRowCount(); i++) {
                list1.add((String) tbl_fields.getValueAt(i, 0));
                if (!tbl_fields.getValueAt(i, 1).toString().contains("Family Column")) {
                    list2.add((String) tbl_fields.getValueAt(i, 0));
                }
            }
            DefaultListModel keyModel = new DefaultListModel();
            CheckBoxList checkList = new CheckBoxList();
            for (String a : list2) {
                keyModel.addElement(a);
            }
            checkList.setModel(keyModel);
            int key = JOptionPane.showConfirmDialog(null, checkList, "Please choose Key", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null);
            if (key == 2) {
                return;
            }
            Object[] selectedKey = checkList.getCheckBoxListSelectedValues();
            writeKey(selectedKey, tableName);
            String[] info = getHBaseInfo();
            Configuration hc = HBaseConfiguration.create();
//            hc.set("hbase.master", info[0] + ":" + info[1]);
//            hc.set("hbase.zookeeper.quorum", info[0]);
//            hc.set("hbase.zookeeper.property.clientPort", info[2]);
            HBaseAdmin hba = new HBaseAdmin(hc);
            HTableDescriptor ht = new HTableDescriptor(TableName.valueOf(tableName));
            for (String cf : list1) {
                ht.addFamily(new HColumnDescriptor(cf));
            }
            hba.createTable(ht);
            txt_table_name.setText(null);
            txt_field_name.setText(null);
            DefaultTableModel model = (DefaultTableModel) tbl_fields.getModel();
            model.setRowCount(0);
            showHBaseTables runabletask = new showHBaseTables();
            new Thread(runabletask).start();
        } catch (IOException ex) {
            Logger.getLogger(pnl_create_hbase_table.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_createActionPerformed

    private void btn_add_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_fieldActionPerformed
        try {
            // TODO add your handling code here:
            String tableName = selectedTableName();
            String[] selectedTableFamilies = selectedTableFamilies();
            Object[] o = {"Single Column", "Family Column"};
            String newField = JOptionPane.showInputDialog(null, "Please give new field's name");
            String newFieldType = (String) JOptionPane.showInputDialog(null, "Please choose new field's type", "Field's Type", JOptionPane.PLAIN_MESSAGE, null, o, "Single Column");
            hbaseAddColumnFamily.hbaseAddFamily add = new hbaseAddFamily();
            add.addFamily(tableName, selectedTableFamilies, newField);
            showHBaseTables runabletask = new showHBaseTables();
            new Thread(runabletask).start();
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(pnl_create_hbase_table.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_add_fieldActionPerformed

    public void setCmbBox() {
        cmb_field_type.addItem("Single Column");
        cmb_field_type.addItem("Family Column");
        cmb_field_type.setSelectedIndex(0);
    }

    public class showHBaseTables implements Runnable {

        public HTableDescriptor[] listHBaseTables() throws IOException {
//            pnl_create_hbase_table tmpObject = new pnl_create_hbase_table();
//            String[] info = tmpObject.getHBaseInfo();
            Configuration conf = HBaseConfiguration.create();
//            conf.set("hbase.master", info[0] + ":" + info[1]);
//            conf.set("hbase.zookeeper.quorum", info[0]);
//            conf.set("hbase.zookeeper.property.clientPort", info[2]);
            HBaseAdmin admin = new HBaseAdmin(conf);
            return admin.listTables();
        }

        private void showHBaseTables() {
            try {
                // TODO add your handling code here:
                tbl_hbase_tables.setModel(null);
                HTableDescriptor[] tablesDescriptor = this.listHBaseTables();
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("Table Name");
                model.addColumn("Table Columnfamily Names");
                AutoFilterTableHeader _header = new AutoFilterTableHeader(tbl_hbase_tables);
                _header.setAutoFilterEnabled(true);
                _header.setReorderingAllowed(false);
                _header.setUseNativeHeaderRenderer(true);
                tbl_hbase_tables.setTableHeader(_header);
                for (HTableDescriptor descriptor : tablesDescriptor) {
                    ArrayList<String> row = new ArrayList<>();
                    row.add(descriptor.getNameAsString());
                    StringBuilder builder = new StringBuilder();
                    HColumnDescriptor[] cDescriptor = descriptor.getColumnFamilies();
                    for (int i = 0; i < cDescriptor.length; i++) {
                        if (i > 0) {
                            builder.append(", ");
                        }
                        builder.append(cDescriptor[i].getNameAsString());
                    }
                    row.add(builder.toString());
                    String[] rowArray = row.toArray(new String[row.size()]);
                    model.addRow(rowArray);
                }
                tbl_hbase_tables.setModel(model);
            } catch (IOException ex) {
                Logger.getLogger(pnl_create_hbase_table.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void run() {
            showHBaseTables();
        }
    }

    public String selectedTableName() {
        String selectTableName = tbl_hbase_tables.getValueAt(tbl_hbase_tables.getSelectedRow(), 0).toString();
        return selectTableName;
    }

    public String[] selectedTableFamilies() {
        String selectTableFamilies = tbl_hbase_tables.getValueAt(tbl_hbase_tables.getSelectedRow(), 1).toString();
        String[] families = selectTableFamilies.split(",", -1);
        for (int i = 0; i < families.length; i++) {
            families[i] = families[i].trim();
        }
        return families;
    }

    public void writeKey(Object[] key, String tableName) throws IOException {
        String path = System.getProperty("user.dir");
        path = path + "/HVCF/HBase/" + tableName;
        File keyPath = new File(path);
        if (!keyPath.exists()) {
            keyPath.mkdirs();
        }
        File f = new File(path + "/key.txt");
        try (FileWriter out = new FileWriter(f)) {
            for (int i = 0; i < key.length; i++) {
                if (i > 0) {
                    out.write("," + key[i].toString());
                } else {
                    out.write(key[i].toString());
                }
            }
            out.close();
        }
    }

    public void writeType() throws IOException {
        String tableName = txt_table_name.getText();
        String path = System.getProperty("user.dir");
        path = path + "/HVCF/HBase/" + tableName;
        File keyPath = new File(path);
        if (!keyPath.exists()) {
            keyPath.mkdirs();
        }
        File f = new File(path + "/typeStructure.txt");
        try (FileWriter out = new FileWriter(f)) {
            for (int i = 0; i < tbl_fields.getRowCount(); i++) {
                out.write(tbl_fields.getValueAt(i, 0) + ", " + tbl_fields.getValueAt(i, 1));
                if (i != tbl_fields.getRowCount() - 1) {
                    out.write("\n");
                }
            }
            out.close();
        }
    }

    public void createColumnsTxt() throws IOException {
        String tableName = txt_table_name.getText();
        String path = System.getProperty("user.dir");
        path = path + "/HVCF/HBase/" + tableName + "/columns.txt";
        File f = new File(path);
        try (FileWriter out = new FileWriter(f)) {
            out.write(",");
            out.close();
        }
    }

    public String[] getHBaseInfo() throws FileNotFoundException, IOException {
        FileInputStream input = new FileInputStream("/tmp/HVCF/hbaseServerInfo/hbaseServerInfo.txt");
        DataInputStream data = new DataInputStream(input);
        InputStreamReader line = new InputStreamReader(data);
        BufferedReader br = new BufferedReader(line);
        String fLine;
        String[] info = null;
        while ((fLine = br.readLine()) != null) {
            info = fLine.split(",", -1);
        }
        return info;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_add_field;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_create;
    private javax.swing.JButton btn_delete;
    private javax.swing.JComboBox cmb_field_type;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane list_field;
    private javax.swing.JTable tbl_fields;
    private com.jidesoft.grid.SortableTable tbl_hbase_tables;
    private javax.swing.JTextField txt_field_name;
    private javax.swing.JTextField txt_table_name;
    // End of variables declaration//GEN-END:variables
}
