/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Manage;

import com.jidesoft.database.ResultSetTableModel;
import com.jidesoft.grid.AutoFilterTableHeader;
import hiveConnection.hiveConnection;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author yujia1986
 */
public class pnl_manage_hive_link extends javax.swing.JPanel {

    /**
     * Creates new form pnl_manage_hive_table
     * @throws java.lang.ClassNotFoundException
     * @throws java.sql.SQLException
     * @throws java.io.IOException
     */
    public pnl_manage_hive_link() throws ClassNotFoundException, SQLException, IOException {
        initComponents();
        showHiveTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_hive_tables = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_hive = new com.jidesoft.grid.SortableTable();
        viewHiveTable = new javax.swing.JButton();
        deleteHiveTable = new javax.swing.JButton();

        list_hive_tables.setBorder(javax.swing.BorderFactory.createTitledBorder("Hive Tables Available"));
        jScrollPane1.setViewportView(list_hive_tables);

        tbl_hive.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tbl_hive);

        viewHiveTable.setText("View");
        viewHiveTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHiveTableActionPerformed(evt);
            }
        });

        deleteHiveTable.setText("Delete");
        deleteHiveTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHiveTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(viewHiveTable)
                            .addComponent(deleteHiveTable)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteHiveTable, viewHiveTable});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewHiveTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteHiveTable))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewHiveTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHiveTableActionPerformed
        // TODO add your handling code here:
        Object object = list_hive_tables.getSelectedValue();
        String tableName = object.toString();
        try {
            Connection hiveConnection = null;
            try {
                hiveConnection = this.getHiveConnection();
            } catch (IOException ex) {
                Logger.getLogger(pnl_manage_hive_link.class.getName()).log(Level.SEVERE, null, ex);
            }
            Statement stmt = hiveConnection.createStatement();
            ResultSet res = stmt.executeQuery("select * from " + tableName);
            AutoFilterTableHeader _header = new AutoFilterTableHeader(tbl_hive);
            _header.setAutoFilterEnabled(true);
            _header.setReorderingAllowed(false);
            _header.setUseNativeHeaderRenderer(true);
            tbl_hive.setTableHeader(_header);
            tbl_hive.setColumnSelectionAllowed(true);
            ResultSetTableModel tableModel = new ResultSetTableModel(res);
            tbl_hive.setModel(tableModel);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(pnl_manage_hive_link.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewHiveTableActionPerformed

    private void deleteHiveTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHiveTableActionPerformed
        // TODO add your handling code here:
        Object object = list_hive_tables.getSelectedValue();
        String tableName = object.toString();
        try {
            Connection hiveConnection = null;
            try {
                hiveConnection = this.getHiveConnection();
            } catch (IOException ex) {
            }
            Statement stmt = hiveConnection.createStatement();
            stmt.execute("drop table " + tableName);
            showHiveTables();
        } catch (ClassNotFoundException | SQLException | IOException ex) {
            Logger.getLogger(pnl_manage_hive_link.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteHiveTableActionPerformed

    public Connection getHiveConnection() throws ClassNotFoundException, SQLException, IOException {
        FileInputStream input = new FileInputStream("/tmp/HVCF/hiveServerInfo/hiveServerInfo.txt");
        DataInputStream data = new DataInputStream(input);
        InputStreamReader line = new InputStreamReader(data);
        BufferedReader br = new BufferedReader(line);
        String fLine;
        String[] info = null;
        while ((fLine = br.readLine()) != null) {
            info = fLine.split(",", -1);
        }
        hiveConnection connection = new hiveConnection();
        return connection.connectHive(info[0], info[1], info[2], info[3]);
    }

    public void showHiveTables() throws ClassNotFoundException, SQLException, IOException {
        Connection con = this.getHiveConnection();
        Statement stmt = con.createStatement();
        ArrayList<String> hiveList = new ArrayList<>();
        ResultSet res = stmt.executeQuery("show tables");
        while (res.next()) {
            hiveList.add(res.getString(1));
        }
        String hiveTableArray[] = hiveList.toArray(new String[hiveList.size()]);
        list_hive_tables.setListData(hiveTableArray);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteHiveTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList list_hive_tables;
    private com.jidesoft.grid.SortableTable tbl_hive;
    private javax.swing.JButton viewHiveTable;
    // End of variables declaration//GEN-END:variables
}
